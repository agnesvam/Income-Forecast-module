
    #------------ARIMA----------------------------------------------------------
    # model=auto_arima(train, start_p=0, start_q=0, max_p=4, max_q=4, m=4,
    #                          start_P=0, seasonal=True, d=1, D=1,
    #                          stepwise=True 
                
    #                          , trace=True,
    #                          error_action='ignore')
    # print(model.summary())
    # print('model seasonal order', model.seasonal_order)
    # pred = model.predict(n_periods=test.shape[0]+5)
    #--------------------------------------------------------------------------------
   
#for ARMA -make data stationary
    # model=auto_arima(train, start_p=0, start_q=0, max_p=4, max_q=4, m=4, start_P=0, seasonal=False, d=0, stepwise=True , trace=True,  error_action='ignore')
    # print(model.summary())
    # print('model seasonal order', model.seasonal_order)
    # pred = model.predict(n_periods=test.shape[0]+5)

    # TestKeys=(pd.to_datetime(test.index.values , format='%Y-%m-%d')).astype(str).tolist()
    # testVal = dict(map(lambda i,j : (i,j) , TestKeys,list(test['income'])))


    # TrainKeys=(pd.to_datetime(train.index.values , format='%Y-%m-%d')).astype(str).tolist()
    # trainVal = dict(map(lambda i,j : (i,j) , TrainKeys,list(train['income'])))

   
    # PredKeys=(pd.to_datetime(pred.index.values , format='%Y-%m-%d')).astype(str).tolist()
    # predVal = dict(map(lambda i,j : (i,j) , PredKeys,pred.values))

    


 

    

   
    # return render_template("forecast.html",  predD=predVal , trainD=trainVal,testD=testVal,
    # all=all_cust,cust=cust, timescale=timescale, model=option, supp=g.com, res=df.to_html() ,len =len(pred) )
